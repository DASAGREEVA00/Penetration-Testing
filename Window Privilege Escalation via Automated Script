We all know that after compromising the victim's machine we have a low-privileges shell that we want to escalate into a higher-privileged shell and this process is 
known as Privilege Escalation. There are some scripts for Windows that may come in useful when trying to escalate privileges on a target system. This is generally 
aimed at enumeration rather than specific vulnerabilities/exploits. This type of script could save your much time.

1.Vectors Privilege Escalation
Following information are considered as critical Information of Windows System:

    1.The version of the operating system
    2.Any Vulnerable package installed or running
    3.Files and Folders with Full Control or Modify Access
    4.Mapped Drives
    5.Potentially Interesting Files
    6.Unquoted Service Paths
    7.Network Information (interfaces, arp, netstat)
    8.Firewall Status and Rules
    9.Running Processes
    10.AlwaysInstallElevated Registry Key Check
    11.Stored Credentials
    12.DLL Hijacking
    13.Scheduled Tasks
    
Several scripts are used in penetration testing to quickly identify potential privilege escalation vectors on Windows systems, and today we will elaborate each 
script that works smoothly.

2.Windows-Exploit-suggester
If you have victim's low-privilege meterpreter or command session then use can use Exploit-Suggester.
This module suggests local meterpreter exploits that can be used. The exploits are suggested based on the architecture and platform that the user has a shell 
opened as well as the available exploits in meterpreter. It's important to note that not all local exploits will be fired. Exploits are chosen based on these 
conditions: session type, platform, architecture, and required default options.
#use post/multi/recon/local_exploit_suggester
#msf post(local_exploit_suggester) > set lhost 192.168.1.107
#msf post(local_exploit_suggester) > set session 1
#msf post(local_exploit_suggester) > exploit

3. Windows Gather Applied Patches
This module will attempt to enumerate which patches are applied to a windows system based on the result of the WMI query:
SELECT HotFixID FROM Win32_QuickFixEngineering.
	
#use post/windows/gather/enum_patches
#msf post(enum_patches) > set session 1
#msf post(enum_patches) > exploit

4.Sherlock
It is a PowerShell script to quickly find the missing software patches for local privilege escalation vulnerabilities. It also as similar as above post exploit as
gives suggestion the target is possibly vulnerable to recommended exploit that can provide higher-privilege shell.

Download it from GitHub with help of the following command and execute when you have a victim's meterpreter session at least once.
#git clone //github.com/rasta-mouse/Sherlock.git

Since this script should be executed in PowerShell, therefore, load PowerShell and then import the downloading script.
#load powershell
#powershell_import '/root/Desktop/Sherlock/Sherlock.ps1'
#powershell_execute "find-allvulns"

5.JAWS - Just Another Windows (Enum) Script
JAWS is PowerShell script designed to help penetration testers (and CTFers) quickly identify potential privilege escalation vectors on Windows systems. It is 
written using PowerShell 2.0 so 'should' run on every Windows version since Windows 7.

Current Features
    1.Network Information (interfaces, arp, netstat)
    2.Firewall Status and Rules
    3.Running Processes
    4.Files and Folders with Full Control or Modify Access
    5.Mapped Drives
    6.Potentially Interesting Files
    7.Unquoted Service Paths
    8.Recent Documents
    9.System Install Files
    10.AlwaysInstallElevated Registry Key Check
    11.Stored Credentials
    12.Installed Applications
    13.Potentially Vulnerable Services
    14.MuiCache Files
    15.Scheduled Tasks

#git clone https//:github.com/411Hall/JAWS.git

Once you have meterpreter shell, upload the downloaded script and use the command shell to run the uploaded script.
#powershell.exe -ExecutionPolicy Bypass -File .\jaws-enum.ps1 -OutputFilename JAWS-Enum.txt

It will store the critical information into a text file named as 'JAWS-Enum.txt'.As said the JAWS-Enum.txt file must have been stored the vector that can lead to 
privilege escalation, let's open it and figure out the result.

6.PowerUp
PowerUp is a Powershell tool to assist with local privilege escalation on Windows systems. PowerUp aims to be a clearinghouse of common Windows privilege 
escalation vectors that rely on misconfiguration.
Running Invoke-AllChecks will output any identifiable vulnerabilities along with specifications for any abuse functions. The HTML Report flag will also generate a 
COMPUTER.username.html version of the report.

Current Feature

Service Enumeration:
    1.Get-ServiceUnquoted :- returns services with unquoted paths that also have a space in the name.
    2.Get-ModifiableServiceFile :- returns services where the current user can write to the service binary path or its config.
    3.Get-ModifiableService :- returns services the current user can modify.
    4.Get-ServiceDetail :- returns detailed information about a specified service.

Service Abuse:
    1.Invoke-ServiceAbuse :-   modifies a vulnerable service to create a local admin or execute a custom command.
    2.Write-ServiceBinary :- writes out a patched C# service binary that adds a local admin or executes a custom command.
    3.Install-ServiceBinary :- replaces a service binary with one that adds a local admin or executes a custom command.
    4.Restore-ServiceBinary :- restores a replaced service binary with the original executable.

DLL Hijacking:
    1.Find-ProcessDLLHijack :- finds potential DLL hijacking opportunities for currently running processes
    2.Find-PathDLLHijack :- finds service %PATH% DLL hijacking opportunities
    3.Write-HijackDll :- writes out a hijackable DLL

Registry Checks:
    1.Get-RegistryAlwaysInstallElevated:- checks if the AlwaysInstallElevated registry key is set
    2.Get-RegistryAutoLogon :- checks for Autologon credentials in the registry
    3.Get-ModifiableRegistryAutoRun :- checks for any modifiable binaries/scripts (or their configs) in HKLM autoruns.

Now use the following command to download it from git hub as said above powerUp is the module of powersploit, therefore, we need to download package of powersploit.

#git clone https:////github.com/PowerShellMafia/PowerSploit.git
#cd PowerSploit
#ls
#cd Privesc
#ls

Again, load PowerShell and then import the downloading script.
	
#load powershell
#powershell_import '/root/Desktop/PowerSploit/Privesc/PowerUp.ps1'
#powershell_execute Invoke-AllChecks

The above command will show that the target is possibly vulnerable to a recommended exploit that can be used to achieve a higher-privilege shell.


